{"mappings":"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","sources":["assets/src/scripts/index.js","assets/src/scripts/listeners.js","assets/src/scripts/iiif.js","assets/src/scripts/utils.js","assets/src/scripts/iiif-leaflet.js","assets/src/scripts/items.js","assets/src/scripts/clone.js","assets/src/scripts/templates.js","assets/src/scripts/export.js"],"sourcesContent":["import { windowListeners, clickListeners, inputListeners } from './listeners.js'\nimport { optInToolTips } from './utils.js';\nimport { IiifLeafletViewer } from './iiif-leaflet.js';\nimport { ItemSelector } from './items.js';\nimport { cloneHandlers } from './clone.js';\nimport { exporter } from './export.js';\n\nconst selector = new ItemSelector();\nselector.addEventListeners();\n\nconst iiifLeaflet = new IiifLeafletViewer();\niiifLeaflet.setupRenderedIIIFImage();\niiifLeaflet.addEventListeners();\niiifLeaflet.leafletControls();\n\n\nconst cloneing = new cloneHandlers();\ncloneing.addEventListeners();\n\nwindowListeners();\nclickListeners();\ninputListeners();\n\nconst exportCSV = new exporter();\nexportCSV.addEventListeners();\n","import { rotate, mirror, cycleQuality } from './iiif.js';\nimport { debounce, resetState, toggleRowAnnotation, insertRowNote, scrollToRow } from './utils.js'\n\nconst config = {\n  \"containerSelector\": \".item\",\n  \"rowSelector\": \"data-csv-controls\",\n  \"message\": \"Are you sure you want to leave this page? Your unsaved changes may be lost.\"\n}\n\n\nexport const windowListeners = () => {\n\n  /**\n   * prevent accidental data loss by prompting the user prior to\n   * navigating away from the current page.\n   */\n  if (document.body.classList.contains('check-unload')) {\n    window.addEventListener('beforeunload', function (e) {\n        e.preventDefault();\n        var confirmationMessage = config.message;\n        e.returnValue = confirmationMessage;\n        return confirmationMessage;\n    });\n  }\n};\n\nexport const clickListeners = () => {\n  /**\n   * watch for click events on the document.\n   */\n  document.addEventListener('click', (event) => {\n    // apply actions to specific targets\n    const target = event.target;\n    const container = target.closest(config.containerSelector);\n\n    // no container? do nothing.\n    if (!container) { return; };\n\n    const rowSelectorStr = container.getAttribute(config.rowSelector);\n\n    /**\n     * iiif rotation button.\n     */\n    if (target.closest(\"button.rotation-button\")) {\n      rotate(container, rowSelectorStr, target);\n    }\n    /**\n     * iiif mirroring button.\n     */  \n    if (target.closest(\"button.flip-horizontal\")) {\n      mirror(container, rowSelectorStr, target);\n    }\n    /**\n     * iiif color quality button.\n     */\n    if (target.closest(\"button[data-iiif-action]\")) {\n      cycleQuality(container, rowSelectorStr, target);\n    }\n    /**\n     * reset the state of an item and associated rows to original state\n     */\n  \tif (target.closest(\"button[data-reset-state]\")) {\n  \t  resetState(container, rowSelectorStr, target);\n  \t}\n    /**\n     * toggle 1/0 on row annotations\n     */\n    if (target.closest(\"button.annotation-button\")) {\n      toggleRowAnnotation(container, rowSelectorStr, target);\n    }\n    /**\n     * toggle 1/0 on row annotations\n     */\n    if (target.closest(\"button.scroll-button\")) {\n      scrollToRow(rowSelectorStr);\n    }\n  });\n};\n\nexport const inputListeners = () => {\n  /**\n   * watch for click events on the document.\n   */\n  document.addEventListener('input', (event) => {\n    const target = event.target;\n    const container = target.closest(config.containerSelector);\n\n    // no container? do nothing.\n    if (!container) { return; };\n\n    const rowSelectorStr = container.getAttribute(config.rowSelector);\n\n    if (target.classList.contains('rotation-input')) {\n      debounce(rotate(container, rowSelectorStr, target), 500);\n    }\n    if (target.classList.contains('annotation-note')) {\n      debounce(insertRowNote(container, rowSelectorStr, target), 500);\n    }\n  });\n};","import { modifySrc, modifyDataElement, isImageIiifModified, revealResetButon } from './utils.js';\n\n\n/**\n* Invert the IIIF URL with '!' and update the data-iiif-src attribute.\n* @param {HTMLElement} img - The image element to be inverted.\n*/\nexport const mirror = (container, rowSelectorStr, button) => {\n  const image = container.querySelector('.img-thumbnail');\n  const base = image.getAttribute('data-iiif-src').split('/max/')[0];\n  const currentMaxValue = image.getAttribute('data-iiif-src').split('/max/')[1];\n  const insertMirrorValue = currentMaxValue.includes('!') ? \"\" : \"!\";\n  const invertMaxValue = currentMaxValue.includes('!') ? currentMaxValue.replace('!', '') : `!${currentMaxValue}`;\n  const newSrc = `${base}/max/${invertMaxValue}`;\n  modifySrc(image, newSrc);\n  // reveal the reset buton\n  revealResetButon(container);\n\n  modifyDataElement(rowSelectorStr, \".entry_iiif_mirror\", insertMirrorValue);\n  isImageIiifModified(rowSelectorStr);\n};\n\n\n/**\n* Cycles iiif quality 'colors' between default, grayscale, and bitonal\n*/\nexport const cycleQuality = (container, rowSelectorStr, button) => {\n  const image = container.querySelector('.img-thumbnail');\n  const qualityList = ['default.jpg', 'gray.jpg', 'bitonal.jpg'];\n  const currentSrc = image.getAttribute('data-iiif-src');\n  for (let i = 0; i < qualityList.length; i++) {\n      if (currentSrc.endsWith(qualityList[i])) {\n          const nextIndex = (i + 1) % qualityList.length;\n          const newQuality = qualityList[nextIndex];\n          const newSrc = currentSrc.replace(qualityList[i], newQuality);\n          modifySrc(image, newSrc);\n          // reveal the reset buton\n          revealResetButon(container);\n          modifyDataElement(rowSelectorStr, \".entry_iiif_quality\", `${newQuality}`);\n          isImageIiifModified(rowSelectorStr);\n          break;\n      }\n  }\n};\n\n\n/**\n* Apply rotation to an image.\n*/\nconst updateRotationSrc = (image, rotation) => {\n  const path = image.getAttribute('data-iiif-src');\n  const base = path.split('/max/')[0]; // Split URL\n  const end = path.split('/max/')[1];\n  const currentRotation = end.split(\"/\")[0]\n  const suffix = end.split(\"/\")[1]\n  const newSrc = `${base}/max/${rotation}/${suffix}`;\n  modifySrc(image, newSrc);\n};\n\n/**\n* generic rotation handler for buttons and inputs\n*/\nexport const rotate = (container, rowSelectorStr, target) => {\n\tconst rotationInput = container.querySelector('.rotation-input');\n\tconst image = container.querySelector('.img-thumbnail');\n\tconst currentRotation = parseInt(rotationInput.value || 0);\n\tif (target === rotationInput) {\n\t  updateRotationSrc(image, currentRotation);\n\t  rotationInput.value = currentRotation;\n    modifyDataElement(rowSelectorStr, \".entry_iiif_rotation\", currentRotation);\n    isImageIiifModified(rowSelectorStr);\n\t} else {\n\t  const newRotation = (currentRotation + 90) % 360;\n\t  updateRotationSrc(image, newRotation);\n\t  rotationInput.value = newRotation;\n    modifyDataElement(rowSelectorStr, \".entry_iiif_rotation\", newRotation);\n    isImageIiifModified(rowSelectorStr);\n\t}\n  // reveal the reset buton\n  revealResetButon(container);\n};","/**\n * convenience shared variables.\n */\nconst config = {\n  \"statsCountEls\": document.querySelectorAll(\".stats-count\"),\n}\n\n/**\n * enable bootstrap tooltiops\n */\nexport const optInToolTips = (() => {\n  /**\n   * self executing init of bootstrap tooltips\n   */\n  new bootstrap.Tooltip(\"body\", {\n    selector: \"[data-bs-toggle='tooltip']\",\n    container: \"body\",\n    trigger: \"hover\"\n  });\n})();\n\nexport const optInPopovers = (() => {\n  /**\n   * self executing init of bootstrap tooltips\n   */\n  new bootstrap.Popover(\"header, main, footer\", {\n    selector: \"[data-bs-toggle='popover']\",\n    container: \"body\",\n    trigger: \"click\"\n  });\n})();\n\n/**\n * debounce function\n */\nexport const debounce = (func, delay) => {\n  let timerId;\n  return (...args) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(() => {\n      func.apply(this, args);\n    }, delay);\n  };\n};\n\n/**\n * make sure that quotes are double escaped in csv outputs.\n */\nexport const escapeCSVValue = (value) => {\n  if (typeof value !== 'string') {\n    return value.toString();\n  }\n  return `${value.replace(/\"/g, \"'\")}`;\n};\n\n/**\n * generate a random~ish string of 7 characters in the range [a-z0-9]\n */\nexport const makeHash = () => {\n  const hash = [...Array(30)]\n                  .map(() => Math.random().toString(36)[2])\n                  .slice(10, 17)\n                  .join('');\n  return hash;\n};\n\n/**\n * unveil a lazysizes image\n */\nexport const unveilImage = (img) => {\n  if (typeof lazySizes !== 'undefined') {\n    lazySizes.loader.unveil(img);\n  }\n};\n\n/**\n * update the src of an image\n */\nexport const modifySrc = (image, newSrc) => {\n    image.setAttribute('data-src', newSrc);\n    image.setAttribute('data-iiif-src', newSrc);\n    unveilImage(image);\n};\n\n/**\n * Reset and item and associated data to it's original state.\n */\nexport const resetState = (container, rowSelectorStr) => {\n  const associatedRow = document.querySelector(rowSelectorStr);\n  const dataPoints = associatedRow.querySelectorAll('td[data-initial-value]');\n  resetDataRow(dataPoints);\n\n  const rotationInput = container.querySelector('.rotation-input');\n  const annotationInput = container.querySelector('.annotation-note');\n  const image = container.querySelector('.img-thumbnail');\n  const smallImageAttr = image.getAttribute(\"data-canoncial-small-src\");\n  const iiifImageAttr = image.getAttribute(\"data-canonical-iiif-src\");\n  const resetButton = container.querySelector(\"[data-reset-state='initial']\");\n  const annotationButtons = container.querySelectorAll(\"button.annotation-button\");\n\n  annotationButtons.forEach( button => {\n    setAnnotationButtonState(button, false);\n  });\n  rotationInput.value = \"\";\n  annotationInput.value = \"\";\n  resetButton.classList.add(\"d-none\");\n  image.setAttribute('data-iiif-src', iiifImageAttr);\n  image.setAttribute('data-src', smallImageAttr);\n  unveilImage(image);\n};\n\n/**\n * update the visible rows count\n */\nexport const  updateVisibleRowsCount = () => {\n  const visibleRows = document.querySelectorAll('.entry:not(.d-none)').length;\n  config.statsCountEls.forEach(el => {\n    el.textContent = visibleRows;\n  });\n};\n\n/**\n * Modify the value of one element in the export data row.\n */\nexport const modifyDataElement = (rowSelectorStr, dataSelectorStr, value) => {\n  const dataRow = document.querySelector(rowSelectorStr);\n  const dataElem = dataRow.querySelector(dataSelectorStr);\n  if (typeof value === 'string') {\n    if (value.length > 0) {\n      dataElem.textContent = `${value}`;\n    } else {\n      dataElem.textContent = \"\";\n    }\n  } else if (typeof value === 'number') {\n    dataElem.textContent = value.toString();\n  } else {\n    dataElem.textContent = \"\";\n  }\n  highlightDataRow(dataRow);\n};\n\n/**\n * dom parser, returning a decoded value.\n */\nexport const domParserUtil = str => {\n    const parser = new DOMParser();\n    const decodedValue = parser.parseFromString(`<!doctype html><body>${str}`, 'text/html').body.textContent;\n    return decodedValue;\n};\n\n/**\n * reset all of the values in a row to their intial state.\n */\nexport const resetDataRow = elems => {\n  elems.forEach(el => {\n      const dataInitialValue = el.getAttribute('data-initial-value');\n      if (dataInitialValue !== null) {\n          const defaultValue = domParserUtil(dataInitialValue);\n          el.textContent = defaultValue;\n      }\n  });\n};\n\n/**\n * set color classes on annotation buttons\n */\nexport const setAnnotationButtonState = (button, state) => {\n  if (state) {\n    button.classList.add(\"btn-success\");\n    button.classList.remove(\"btn-outline-secondary-subtle\");\n  } else {\n    button.classList.add(\"btn-outline-secondary-subtle\");\n    button.classList.remove(\"btn-success\");\n  }\n};\n\n/**\n * toggles a boolean annotation.\n */\nexport const toggleRowAnnotation = (container, rowSelectorStr, target) => {\n  const button = target.closest(\"button\");\n  const associatedRow = document.querySelector(rowSelectorStr);\n  const fieldSelector = button.getAttribute(\"data-export-toggles\");\n  const associatedField = associatedRow.querySelector(fieldSelector);\n\n  if (associatedField.textContent == \"0\") {\n    associatedField.textContent = \"1\";\n    setAnnotationButtonState(button, true);\n  } else {\n    associatedField.textContent = \"0\";\n    setAnnotationButtonState(button, false);\n  }\n  highlightDataRow(associatedRow);\n  // reveal the reset buton\n  revealResetButon(container);\n};\n\n/**\n * set boolean value in export row if one or more iiif properties have been set\n */\nexport const isImageIiifModified = (rowSelectorStr) => {\n  const workingRow = document.querySelector(rowSelectorStr);\n  const entryIsModifiedEl = workingRow.querySelector(\".entry_is_modified\");\n  let modifiedValue = entryIsModifiedEl.textContent;\n\n  // Function to check if all \".iiif-element\" spans have matching content and initial-state values\n  const allElementsMatch = () => {\n    const iiifElements = workingRow.querySelectorAll(\".iiif-element\");\n    for (const element of iiifElements) {\n      const textContent = element.textContent;\n      const initialState = element.getAttribute(\"data-initial-value\");\n      if (textContent !== initialState) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (modifiedValue === \"0\") {\n    entryIsModifiedEl.textContent = \"1\";\n  } else if (allElementsMatch()) {\n    entryIsModifiedEl.textContent = \"0\";\n  }\n};\n\n/**\n * Add a text note to the data export row\n */\nexport const insertRowNote = (container, rowSelectorStr, target) => {\n  const controlsSelector = target.getAttribute(\"data-export-toggles\");\n  const associatedRow = document.querySelector(rowSelectorStr);\n  const controlsElement = associatedRow.querySelector(controlsSelector);\n  let insertValue = escapeCSVValue(target.value);\n  if (target.value === \"\") {\n    controlsElement.textContent = \"\";\n  } else {\n    controlsElement.textContent = insertValue;\n  }\n};\n\nexport const highlightDataRow = (row) => {\n  row.classList.add('table-primary', 'highlight');\n  setTimeout(() => {\n    row.classList.remove('table-primary', 'highlight');\n  }, 2000);\n};\n\nexport const revealResetButon = (container) => {\n  const resetButton = container.querySelector('[data-reset-state=\"initial\"]');\n  resetButton.classList.remove(\"d-none\");\n};\n\n/**\n * scroll to the relevent csv row and highlight it.\n */\nexport const scrollToRow = (rowSelectorStr) => { \n  const associatedRow = document.querySelector(rowSelectorStr);\n  if (associatedRow) {\n    associatedRow.scrollIntoView({behavior: 'smooth', block: 'nearest', inline: 'start'});\n    highlightDataRow(associatedRow);\n  }\n}\n\n/**\n * slugify a string\n */\nexport const slugify = (str) => {\n  return String(str)\n    .normalize('NFKD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-');\n}\n","import { modifySrc, modifyDataElement, isImageIiifModified, resetDataRow, setAnnotationButtonState, revealResetButon, slugify } from './utils.js';\n\nexport class IiifLeafletViewer {\n  constructor() {\n    this.config = {\n      \"leafletInsertPoint\": \"iiif-workspace\", // getElementById\n      \"leafletControlBarClasses\": \"leaflet-bar leaflet-control leaflet-control-custom bg-white\",\n      \"iiifLayer\": null,\n      \"iiifImageBase\": \"\",\n      \"button\": null,\n      \"item\": null,\n      \"img\": null,\n      \"iiifInfo\": null,\n      \"iiifCanononicalUrl\": null,\n      \"iiifCroppedUrl\": null,\n      \"rectangleType\": null,\n      \"cropControlEditOnly\": null,\n      \"boundsControlEditOnly\": null,\n      \"processCropControl\": null,\n      \"processCropTool\": null,\n      \"processBoundsControl\": null,\n      \"processBoundsTool\": null,\n      \"region\": \"full\",\n      \"boundsData\": null,\n    }\n\n    this.selectors = {\n      \"iiifModal\": document.querySelector('#modal-iiif-crop'),\n      \"inserDataButton\": document.querySelector('#insert-data'),\n      \"colorSchemeDropdown\": document.querySelector(\"#color-scheme-dropdown\"),\n    }\n\n    this.featureGroups = {\n      \"cropping\" : new L.FeatureGroup(),\n      \"bounding\": new L.FeatureGroup(),\n    }\n\n    this.colors = {\n      active: \"blue\",\n      schemes: [\n        { name: \"blue\", crop: \"#3388ff\", bounds: \"#4bebdd\", invert: false },\n        { name: \"green\", crop: \"#34683F\", bounds: \"#7CFF9B\", invert: false },\n        { name: \"red\", crop: \"#912C30\", bounds: \"#FF4857\", invert: false },\n        { name: \"yellow\", crop: \"#AFA600\", bounds: \"#FFF60F\", invert: false },\n        { name: \"black\", crop: \"#000000\", bounds: \"#404040\", invert: false },\n        { name: \"white\", crop: \"#D9D9D9\", bounds: \"#FFFFFF\", invert: true },        \n      ],\n    }\n\n    this.templates = {\n      \"drawBoundsButton\" : `<button id=\"bounds-button\" \n                                   class=\"btn btn-sm btn-secondary-subtle\"\n                                   data-bs-toggle=\"tooltip\"\n                                   data-bs-title=\"Draw a labeled bounding box (Shortcut: CTRL+b)\"\n                                   data-bs-placement=\"right\"\n                                   data-bs-container=\".leaflet-control\">\n                                <span class=\"far fa-rectangles-mixed fa-fw text-primary\"\n                                      aria-hidden=\"true\"></span>\n                                Bounds\n                              </button>`,\n      \"drawCropButton\" : `<button id=\"crop-button\" \n                                  class=\"btn btn-sm btn-secondary-subtle\"\n                                  data-bs-toggle=\"tooltip\"\n                                  data-bs-title=\"Draw a cropping box (Shortcut: CTRL+c)\"\n                                  data-bs-placement=\"right\"\n                                  data-bs-container=\".leaflet-control\">\n                                <span class=\"far fa-crop-simple fa-fw text-primary\"\n                                      aria-hidden=\"true\"></span>\n                                Crop\n                              </button>`,\n      \"popoverInput\" : `<div class=\"input-group\">\n                          <span class=\"input-group-text\">\n                            <span class=\"far fa-tag fa-fw\"\n                                  data-bs-title=\"add a label to this bounding box\"\n                                  data-bs-toggle=\"tooltip\"></span>\n                          </span>\n                          <input type=\"text\"\n                                 autocomplete=\"on\"\n                                 spellcheck=\"true\"\n                                 class=\"form-control\" \n                                 placeholder=\"Label\" \n                                 aria-label=\"Label\"\n                                 value=\"\">\n                          <button class=\"bounds-delete-button btn btn-outline-danger\"\n                                  data-bs-title=\"delete this box\"\n                                  data-bs-toggle=\"tooltip\">\n                            <span class=\"far fa-xmark fa-fw\"></span>\n                          </button>\n                          <button class=\"bounds-export-button btn btn-outline-primary\"\n                             target=\"_blank\"\n                             data-download-file=\"\"\n                             data-download-name=\"default.jpg\"\n                             data-download-outputname=\"default.jpg\"\n                             data-bs-title=\"view/download image with these bounds\"\n                             data-bs-toggle=\"tooltip\">\n                            <span class=\"far fa-download fa-fw\"></span>\n                          </button>                          \n                        </div>`,\n      \"makeColorSelector\" : (scheme) => {\n        const inverted = scheme.invert ? \"bg-dark\" : \"\";\n        return`<li>\n                <button class=\"dropdown-item btn btn-link border-0\" data-color-scheme=\"${scheme.name}\">\n                  <span class=\"${inverted} p-1 me-1\">\n                    <span style=\"color: ${scheme.crop}\" class=\"fas fa-square\"></span>\n                    <span style=\"color: ${scheme.bounds}\" class=\"fas fa-square\"></span>\n                  </span>\n                  ${scheme.name}\n                </button>\n            </li>`\n      },\n    }\n    this.rendered = null;\n  }\n\n\n  utils = {\n    /**\n     * Create additional Control placeholders\n     */\n    addControlPlaceholders: (map) => {\n      let corners = map._controlCorners,\n          l = 'leaflet-',\n          container = map._controlContainer;\n\n      // Define the createCorner arrow function within the method\n      const createCorner = (vSide, hSide) => {\n          const className = `${l}${vSide} ${l}${hSide}`;\n          corners[vSide + hSide] = L.DomUtil.create('div', className, container);\n      };\n      createCorner('verticalcenter', 'left');\n      createCorner('verticalcenter', 'right');\n    },\n\n    /**\n     * genete a iiif image url with variable regions\n     */\n    croppedImageConstructor: (region) => {\n      region = region || 'full';\n      return `${this.config.iiifImageBase}/${region}/max/0/default.jpg`;\n    },\n\n    /**\n     * generate a comma-separated region string from bounds\n     */\n    getIiifRegionPx: (bounds) => {\n      // Get the current zoom level of the rendered map\n      const zoom = this.rendered.getZoom();\n      // Project the coordinates of the rectangle's corners\n      const min = this.rendered.project(bounds.getSouthWest(), zoom);\n      const max = this.rendered.project(bounds.getNorthEast(), zoom);\n      // Get the image size at the current zoom level\n      const imageSize = this.config.iiifLayer._imageSizes[zoom];\n      // Calculate x and y ratios for the region\n      const xRatio = this.config.iiifLayer.x / imageSize.x;\n      const yRatio = this.config.iiifLayer.y / imageSize.y;\n      // Calculate the region coordinates based on ratios and projected points\n      const x = Math.floor(min.x * xRatio);\n      const y = Math.floor(max.y * yRatio);\n      const width = Math.floor((max.x - min.x) * xRatio);\n      const height = Math.floor((min.y - max.y) * yRatio);\n      // As per IIIF spec, ensure that no values are negative,\n      // setting them to 0 if necessary\n      const region = [\n        x < 0 ? 0 : x,\n        y < 0 ? 0 : y,\n        width < 0 ? 0 : width,\n        height < 0 ? 0 : height\n      ];\n      // Return the region coordinates as a comma-separated string\n      return region.join(',');\n    },\n\n    /**\n     * gather all of the bounds and their labels into an array.\n     */\n    getBoundingBoxData: () => {\n      const data = [];\n      this.featureGroups.bounding.eachLayer(layer => {\n        const label = layer.bounds_label || '';\n        const bounds = this.utils.getIiifRegionPx(layer.getBounds())\n        data.push({ label, bounds });\n      });\n      return data;\n    },\n\n    /**\n     * create a color scheme dropdown utility for easier viewing of\n     * when iiif image layer doesn't provide contrast to bounds\n     */\n    buildColorSchemeDropdown: () => {\n      this.colors.schemes.forEach(scheme => {\n        const line = this.templates.makeColorSelector(scheme);\n        this.selectors.colorSchemeDropdown.insertAdjacentHTML(\"beforeend\", line);\n      });\n    },\n    /**\n     * get the current active color scheme.\n     */\n    getActiveColorScheme: () => {\n      const scheme = this.colors.schemes.find(scheme => scheme.name === this.colors.active);\n      return scheme;\n    },\n\n    /**\n     * set the color scheme for all bounds given a named arg.\n     */\n    setActiveColorScheme: (schemeName) => {\n      this.colors.active = schemeName;\n      this.utils.changeLayerColorScheme(this.featureGroups.bounding);\n      this.utils.changeLayerColorScheme(this.featureGroups.cropping);\n    },\n\n    /**\n     * modify layer colors for a feature group\n     */\n    changeLayerColorScheme: (featureGroup) => {\n      const colorScheme = this.utils.getActiveColorScheme();\n      const layers = featureGroup.getLayers();\n      layers.forEach(layer => {\n        if (layer.bounds_type === \"bounds\") {\n          layer.setStyle({ color: colorScheme.bounds });\n        } else if (layer.bounds_type === \"crop\") {\n          layer.setStyle({ color: colorScheme.crop });\n        }\n      });\n    },\n  }\n\n  /**\n   * Initial leaflet \"map\" configuration\n   */\n  setupRenderedIIIFImage() {\n    // the base rendering of the leaflet map\n    this.rendered = L.map(this.config.leafletInsertPoint, {\n      attributionControl: false,\n      center: [0, 0],\n      crs: L.CRS.Simple,\n      zoom: 1,\n      minZoom: 1,\n      maxZoom: 5,\n    });\n    // add the featureGroup for cropping rectangle\n    this.rendered.addLayer(this.featureGroups.cropping);\n    this.rendered.addLayer(this.featureGroups.bounding);\n    this.utils.addControlPlaceholders(this.rendered);\n  }\n\n  /**\n   * Clean up the map when the display modal is hidden\n   */\n  cleanupTasks(which) {\n    // remove the cropping rectangle from the feature group\n    if (which === \"all\") {\n      this.featureGroups.cropping.clearLayers();\n      this.featureGroups.bounding.clearLayers();\n      this.rendered.removeControl(this.config.cropControlEditOnly);\n      this.rendered.removeControl(this.config.boundsControlEditOnly);\n      this.rendered.addControl(this.config.processCropTool)\n      //this.config.processCropTool.addTo(this.rendered);\n    } else if (which === \"crop\") {\n      this.featureGroups.cropping.clearLayers();\n      this.rendered.removeControl(this.config.cropControlEditOnly);\n      //this.config.processCropTool.addTo(this.rendered);\n      this.rendered.addControl(this.config.processCropTool)\n    } else if (which === \"bounds\") {\n      this.featureGroups.bounding.clearLayers();\n      this.rendered.removeControl(this.config.boundsControlEditOnly);  \n    }\n    // unset config variables\n    this.config.button, this.config.item, this.config.img, this.config.iiifInfo, this.config.rectangleType, this.config.iiifCanononicalUrl, this.config.iiifCroppedUrl, this.config.boundsData = null;\n    // unsert the cropping region to iiif \"full\"\n    this.config.region = \"full\";\n  }\n\n  /**\n   * calculate the bounding box of a drawn rectangle and create a new\n   * iiif url for the cropped image.\n   */\n  cropRenderedImage(bounds) {\n    // get the bouding box as a comma-seperated string\n    const region = this.utils.getIiifRegionPx(bounds);\n    // Create the URL for the cropped image\n    const url = this.utils.croppedImageConstructor(region);\n    this.config.region = `${region}`;\n    // Update the \"data-iiif-cropped-src\" attribute of the #insert-data element\n    //this.selectors.inserDataButton.setAttribute(\"data-iiif-cropped-src\", url);\n    this.config.iiifCroppedUrl = url;\n    // Return the generated URL\n    return url;\n  }\n\n\n  /**\n   * bounds popover\n   */\n  initPopover = (layer) => {\n    // popover content\n    const content = this.templates.popoverInput;\n    // Calculate the offset for the top-right corner\n    const offsetX = layer._bounds._northEast.lng - layer._bounds._southWest.lng;\n    const offsetY = layer._bounds._northEast.lat - layer._bounds._southWest.lat;\n    // generate a DOM element with the content\n    let popupEL = L.DomUtil.create('div', 'infoWindow');\n        popupEL.innerHTML = content;\n    // bind the popup to the current rectangle\n    layer.bindPopup(popupEL, {\n      closeButton: true,\n      minWidth: 300,\n      maxWidth: 350,\n      offset: [offsetX, -offsetY], // offset placement\n    });\n\n    this.handleBoundsLayerClick(layer);\n    this.handlePopupOpen(layer);\n    this.handleBoundsDeleteClick(layer);\n    this.updateBoundsExportPath(layer);\n  };\n\n  /**\n   * Events to occur when bounds control is clicked\n   */\n  boundsControlClickHandler = () => {\n    // set a temp var with a rectangle type: 'bounds'\n    this.config.rectangleType = \"bounds\";\n    // create a new drawing rectangle with shape options\n    const rectangle = new L.Draw.Rectangle(this.rendered);\n    const colorScheme = this.utils.getActiveColorScheme();\n    rectangle.setOptions({\n      shapeOptions: {\n        color: colorScheme.bounds,\n        dashArray: \"6\",\n        weight: 3,\n      },\n    });\n    // enable the drawn rectangle.\n    rectangle.enable();\n  }\n\n  /**\n   * Events to occur when bounds control is clicked\n   */\n  cropControlClickHandler = () => {\n    // set a temp var with a rectangle type: 'bounds'\n    this.config.rectangleType = \"crop\";\n    // create a new drawing rectangle with shape options\n    const rectangle = new L.Draw.Rectangle(this.rendered);\n    const colorScheme = this.utils.getActiveColorScheme();\n\n    rectangle.setOptions({\n      shapeOptions: {\n        color: colorScheme.crop,\n        dashArray: \"1\",\n        weight: 4,\n      },\n    });\n    // enable the drawn rectangle.\n    rectangle.enable();\n  }\n\n  /**\n   * Events occuring on bounds rectangle click\n   */\n  handleBoundsLayerClick = (layer) => {\n    // open the data entry popup on click\n    layer.on('click', () => {\n      layer.openPopup();\n    });\n  }\n\n\n  /**\n   * handlers for popup text input.\n   */\n  handleBoundsInputChange = (input, layer) => {\n    input.addEventListener('blur', (e) => {\n      // Store the entered value on the layer\n      this.setCustomProperty(layer, \"bounds_label\", e.target.value);\n      this.config.boundsData = this.utils.getBoundingBoxData();\n      // update the downloadable filename with user entered value\n      const button = e.target.closest(\".leaflet-popup-content\").querySelector(\".bounds-export-button\");\n      // this value never changes\n      const downloadFileName = button.getAttribute(\"data-download-name\");\n      // copy\n      let outputname = downloadFileName\n      // prepend formated slugified input text if it exists.\n      const slugifiedValue = e.target.value ? `${slugify(e.target.value)}-` : \"\";\n      outputname = `${slugifiedValue}${outputname}`;\n      // set as the output attr.\n      button.setAttribute(\"data-download-outputname\", outputname);\n    });\n  };\n\n  /**\n   * actions occuring when bounds popup is opened.\n   */\n  handlePopupOpen = (layer) => {\n    layer.on('popupopen', () => {\n      // Find the input element in the popup content\n      const popupContent = layer.getPopup().getContent();\n      const input = popupContent.querySelector(\"input\");\n      // wait for the popover to be available and focus\n      setTimeout(() => {\n        input.focus();\n      }, 500);\n      // blur listener\n      this.handleBoundsInputChange(input, layer);\n    });\n  };\n\n\n  handleBoundsDeleteClick = (layer)=> {\n    const deleteButton = layer.getPopup().getContent().querySelector(\".bounds-delete-button\");\n    deleteButton.addEventListener('click', (e) => {\n      // get the button and close the bootstrap tooltip\n      const button = e.target.closest(\"button\");\n      const tooltip = bootstrap.Tooltip.getOrCreateInstance(button);\n      tooltip.hide();\n      // close the popup\n      layer.closePopup();\n      // remove the layer from the feature group\n      this.featureGroups.bounding.removeLayer(layer);\n    });\n  };\n\n  /**\n   * update the url and filename of the download image region button.\n   */\n  updateBoundsExportPath = (layer) => {\n    // get the button\n    const exportButton = layer.getPopup().getContent().querySelector(\".bounds-export-button\");\n    // identify the region\n    const region = this.utils.getIiifRegionPx(layer.getBounds());\n    // create a new downlaodable url path\n    const url = this.utils.croppedImageConstructor(region);\n    // Extract the identifier (e.g., 'metapth317618') from the URL\n    const identifierMatch = url.match(/\\/ark:\\/\\d+\\/([^/]+)\\//);\n    const identifier = identifierMatch ? identifierMatch[1] : '';\n    // Split the regions string into an array of integers\n    const regionArray = region.split(',').map(Number);\n    // Create the download filename\n    const filename = `${identifier}-region-${regionArray.join('_')}.jpg`;\n    // add the content disposition arg to the URL to ensure downloads.\n    const downloadURL = `${url}?response-content-disposition=attachment`;\n    exportButton.setAttribute(\"data-download-file\", downloadURL);\n    exportButton.setAttribute(\"data-download-name\", filename);\n    exportButton.setAttribute(\"data-download-outputname\", filename);\n\n  };\n\n\n  /**\n   * Download an image region via fetch.\n   */\n  async downloadImage(target) {\n      try {\n        const button = target.closest(\".bounds-export-button\");\n        const downloadURL = button.getAttribute(\"data-download-file\");\n        const downloadName = button.getAttribute(\"data-download-outputname\");\n\n        // Use the fetch API to get the image as a Blob\n        const response = await fetch(downloadURL);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch the image (HTTP ${response.status})`);\n        }\n\n        const blob = await response.blob();\n\n        // Create a blob URL with the desired file name\n        const blobUrl = URL.createObjectURL(blob);\n\n        // Create a link element to trigger the download\n        const link = document.createElement('a');\n        link.href = blobUrl;\n\n        // Set the download attribute with the desired file name\n        link.setAttribute('download', downloadName);\n\n        // Simulate a click on the link to trigger the download\n        link.click();\n\n        // Clean up the blob URL after the download\n        URL.revokeObjectURL(blobUrl);\n        link.remove();\n      } catch (error) {\n        console.error('Download failed:', error);\n      }\n    }\n\n\n\n  /**\n   * set custom property to a leaflet layer\n   */\n  setCustomProperty = (layer, propName, value) => {\n    if (value !== undefined) {\n      layer[propName] = value;\n    } else {\n      layer[propName] = '';\n    }\n  };\n\n\n  /**\n   * Listeners\n   */\n  addEventListeners = () => {\n\n    /**\n     * \"hidden.bs.modal\" event handler\n     */\n    this.selectors.iiifModal.addEventListener('hidden.bs.modal', event => {\n      // remove the iiif image layer.\n      if (this.config.iiifLayer) {\n        this.rendered.removeLayer(this.config.iiifLayer);\n      }\n      // reset UX.\n      this.cleanupTasks(\"all\");\n    });\n\n    /**\n     * \"shown.bs.modal\" event handler\n     */\n    this.selectors.iiifModal.addEventListener('shown.bs.modal', event => {\n      //\n      // Set various config options for the current rendering.\n      //\n\n      // Button that triggered the modal\n      this.config.button = event.relatedTarget;\n      // closest item\n      this.config.item = this.config.button.closest('.item');\n      // associated image\n      this.config.img = this.config.item.querySelector(\"img\");\n      // iiif json url\n      this.config.iiifInfo = this.config.img.getAttribute(\"data-iiif-info\");\n      // iiif image url\n      this.config.iiifCanononicalUrl = this.config.img.getAttribute(\"data-canonical-iiif-src\");\n      // iiif url minus info.json\n      this.config.iiifImageBase = this.config.iiifInfo.split('/info')[0];\n      \n      // We are in modal, so map needs size updates after \"shown\".\n      this.rendered.invalidateSize();\n      // add the base iiif image to the rendered 'map'\n      this.config.iiifLayer = L.tileLayer.iiif(this.config.iiifInfo, {}).addTo(this.rendered);\n    });\n\n\n    /**\n     * misc click handlers for dynamic inserts\n     */\n    this.selectors.iiifModal.addEventListener(\"click\", event => {\n      const target = event.target;\n\n      /**\n       * update settings for color schemes of drawn boxes\n       */\n      if (target.closest(\"[data-color-scheme]\")) {\n        const dataScheme = target.closest(\"[data-color-scheme]\").getAttribute(\"data-color-scheme\");\n        this.utils.setActiveColorScheme(dataScheme);\n      };\n\n      /**\n       * exporting a cropped image\n       */\n      if (target.closest(\".bounds-export-button\")) {\n        this.downloadImage(target);\n      }\n\n    });\n\n    /**\n     * work is complete, insert data back to main UI and close modal\n     */\n    this.selectors.inserDataButton.addEventListener('click', event => {\n      // get the iiif cropped image url\n      const croppedPath = this.config.iiifCroppedUrl;\n      const boundsData = this.config.boundsData;\n      // container in main screen\n      const container = this.config.item;\n      // reset rotation input to 0\n      container.querySelector('.rotation-input').value = \"\";\n      // find and show the reset button\n      revealResetButon(container);\n      // get the current modal\n      const modalEl = document.querySelector(\"#modal-iiif-crop\");\n      const modal = bootstrap.Modal.getOrCreateInstance(modalEl);\n      // modify the main imag source so it shows the cropped image\n      if (croppedPath) {\n        modifySrc(this.config.img, croppedPath);  \n      }\n      // get the associated data row for the current image\n      const coorespondingRow = container.getAttribute(\"data-csv-controls\");\n      const coorespondingRowEl = document.querySelector(coorespondingRow);\n      // unset any annotations that were previously made.\n      const annotationButtons = container.querySelectorAll(\".annotation-button\");\n      annotationButtons.forEach(button => {\n        setAnnotationButtonState(button, false);\n      });\n      // reset the data row to initial state.\n      const dataPoints = coorespondingRowEl.querySelectorAll('span[data-initial-value]');\n      resetDataRow(dataPoints);\n      // add the iiif bounds to the row's field\n      modifyDataElement(coorespondingRow, \".entry_iiif_region\", this.config.region);\n      // inject any bounds data and labels to csv.\n      \n      if (boundsData) {\n        const stringifiedBounds = JSON.stringify(boundsData);\n        const csvSafeBounds = stringifiedBounds.replace(/\"/g, '\"\"');\n        modifyDataElement(coorespondingRow, \".entry_iiif_labeled_bounds\", `${csvSafeBounds}`);\n      }\n      // indicate on the data row that a iiif modiciation has been made.\n      isImageIiifModified(coorespondingRow);\n      // close the modal.\n      modal.hide();\n    });\n\n    /**\n     * On rectangle creation, draw a layer, get bounds &\n     * generate new iiif url, remove 'full' drawing controls\n     * to prevent more rectangles, add \"edit\" control.\n     */\n    this.rendered.on(L.Draw.Event.CREATED, e => {\n      // get the bounds of the current draw layer\n      const bounds = e.layer.getBounds();\n      if (this.config.rectangleType === \"bounds\") {\n        // add the rectangle to the copping feature group.\n        this.featureGroups.bounding.addLayer(e.layer);\n        this.setCustomProperty(e.layer, \"bounds_label\", \"\");\n        this.setCustomProperty(e.layer, \"bounds_type\", \"bounds\");\n        this.initPopover(e.layer);\n        this.config.boundsControlEditOnly.addTo(this.rendered);\n        // push all of the layer data into an array\n        this.config.boundsData = this.utils.getBoundingBoxData();\n      } else if (this.config.rectangleType === \"crop\") {\n        // allow only a single cropping layer, clear any remaining previous.\n        this.featureGroups.cropping.clearLayers();\n        // generate a cropped iiif url with the bounds\n        // and make bounds info available for \n        // display/export on main screen.\n        this.cropRenderedImage(bounds);\n        // add a bounds type property to the layer\n        this.setCustomProperty(e.layer, \"bounds_type\", \"crop\");\n        // add the rectangle to the copping feature group.\n        this.featureGroups.cropping.addLayer(e.layer);\n        // disable pointer events on this layer\n        e.layer.getElement().style.pointerEvents = 'none';\n        // add the \"edit only\" controls to the UI\n        this.config.cropControlEditOnly.addTo(this.rendered);\n        // remove the new drawing control so only a single crop is possible.\n        //this.config.processCropControl.remove(this.rendered);\n        this.rendered.removeControl(this.config.processCropTool);\n      }\n    });\n\n    /**\n     * On edit of existing rectangle, update the iiif image\n     * url with new bounds.\n     */\n    this.rendered.on('draw:edited', e => {\n      // editing is active, get all of the layers\n      const layers = e.layers;\n      layers.eachLayer( layer => {\n        if (layer.bounds_type === \"bounds\") {\n          // push all of the layer data into an array\n          this.config.boundsData = this.utils.getBoundingBoxData();\n        } else if (layer.bounds_type === \"crop\") {\n          // generate a cropped iiif url with the bounds\n          // and make bounds info available for \n          // display/export on main screen.\n          const bounds = layer.getBounds();\n          this.cropRenderedImage(bounds);  \n        }\n      });\n    });\n\n    /**\n     * On rectangle delete, reset to initial state\n     */\n    this.rendered.on(L.Draw.Event.DELETED, e => {\n      const layers = e.layers;\n      layers.eachLayer( layer => {\n        const layerType = layer.bounds_type;\n        if (layerType === \"bounds\") {\n          // there can be multiple bounds layers. do cleanup task only if there are none left.\n          if (this.featureGroups.bounding.getLayers().length === 0){\n            this.cleanupTasks(\"bounds\");\n          }\n        } else if (layerType === \"crop\") {\n          // there can only be a single crop layer but check to be safe.\n          if (this.featureGroups.cropping.getLayers().length === 0){\n            this.cleanupTasks(\"crop\");\n            this.rendered.addControl(this.config.processCropTool);\n          }\n        }\n      });\n    });\n\n  }; // end event listeners\n\n\n  /**\n   * configure leaflet edit controls\n   */\n  leafletControls = () => {\n\n\n    /**\n     * a rectangle drawing tool for adding mutliple bounding boxes.\n     */\n\n    const cropTool = L.Control.extend({\n      // where it goes\n      options: {\n        position: 'topleft'\n      },\n      // html dom element\n      onAdd: () => {\n        // custom control bar for the button.\n        this.config.processCropControl = L.DomUtil.create(\n          'div', \n          this.config.leafletControlBarClasses\n        );\n        //customize leaflet draw texts\n        L.drawLocal.draw.handlers.rectangle.tooltip.start = 'Draw a cropping box';\n        // the button\n        this.config.processCropControl.innerHTML = this.templates.drawCropButton;\n        this.config.processCropControl.addEventListener(\"click\", this.cropControlClickHandler);\n\n        document.addEventListener(\"keydown\", (event) => {\n          // Check if CMD/CTRL key is held and the \"B\" key is pressed\n          if (event.ctrlKey && event.key === \"c\") {\n            // Execute your function here\n            this.cropControlClickHandler();\n          }\n        });\n        return this.config.processCropControl;\n      },\n      onRemove: () => {\n        //this.config.processCropControl = null;\n        //this.selectors.inserDataButton.setAttribute(\"data-iiif-cropped-src\", this.config.iiifCanononicalUrl);\n      }\n    });\n\n\n    /**\n     * a rectangle drawing tool for adding mutliple bounding boxes.\n     */\n\n    const boundsTool = L.Control.extend({\n      // where it goes\n      options: {\n        position: 'verticalcenterleft'\n      },\n      // html dom element\n      onAdd: () => {\n        // custom control bar for the button.\n        this.config.processBoundsControl = L.DomUtil.create(\n          'div', \n          this.config.leafletControlBarClasses\n        );\n        //customize leaflet draw texts\n        L.drawLocal.draw.handlers.rectangle.tooltip.start = 'Draw, then click box to label.';\n        // the button\n        this.config.processBoundsControl.innerHTML = this.templates.drawBoundsButton;\n        this.config.processBoundsControl.addEventListener(\"click\", this.boundsControlClickHandler);\n\n        document.addEventListener(\"keydown\", (event) => {\n          // Check if CMD/CTRL key is held and the \"B\" key is pressed\n          if (event.ctrlKey && event.key === \"b\") {\n            // Execute your function here\n            this.boundsControlClickHandler();\n          }\n        });\n        return this.config.processBoundsControl;\n\n      }\n    });\n\n    /**\n     * edit controls, don't allow further drawing\n     */\n    this.config.boundsControlEditOnly = new L.Control.Draw({\n      edit: {\n        featureGroup: this.featureGroups.bounding,\n      },\n      draw: false,\n      position: \"verticalcenterleft\",\n    });\n\n    /**\n     * edit controls, don't allow further drawing\n     */\n    this.config.cropControlEditOnly = new L.Control.Draw({\n      edit: {\n        featureGroup: this.featureGroups.cropping,\n      },\n      draw: false,\n      position: \"topleft\",\n    });\n\n    // add cropping tool to display\n    this.config.processCropTool = new cropTool();\n    this.rendered.addControl(this.config.processCropTool);\n\n    // add bounds tool to display\n    this.config.processBoundsTool = new boundsTool();\n    this.rendered.addControl(this.config.processBoundsTool)\n\n    this.utils.buildColorSchemeDropdown();\n  };\n}; // end class LeafletIIIF\n","import { updateVisibleRowsCount } from './utils.js';\n\nexport class ItemSelector {\n  constructor() {\n    this.config = {\n      \"toggleVisibilityState\": document.querySelector(\"#toggle-exclude-state\"),\n      \"toggleVisibilityCount\": document.querySelector(\"#toggle-exclude-count\"),\n      \"exclusionCount\": 0,\n      \"showingHiddenItems\": true,\n      \"opacityClass\": \"opacity-25\",\n      \"hiddenClass\": \"d-none\",\n      \"csvControls\": \"data-csv-controls\",\n      \"includeText\": \"Include\",\n      \"excludeText\": \"Exclude\",\n      \"showText\": \"Show\",\n      \"hideText\": \"Hide\",\n      \"includeClasses\": [\"text-danger\", \"fa-square-xmark\"],\n      \"excludeClasses\": [\"text-success\", \"fa-square-check\"],\n      \"visualExcludeClasses\": [\"bg-danger\", \"opacity-25\"],\n    }\n  }\n\n\n  /**\n   * toggle the visibility of excluded items and their associated csv rows\n   */\n  toggleVisibility = () => {\n    const excludedItems = document.querySelectorAll(\".excluded-item\");\n    if (this.config.toggleVisibilityState.textContent === this.config.hideText) {\n      this.config.showingHiddenItems = false;\n      this.config.toggleVisibilityState.textContent = this.config.showText;\n      excludedItems.forEach( item => {\n        const csvRow = item.getAttribute(this.config.csvControls);\n        const csvRowEl = document.querySelector(csvRow);\n        item.classList.add(this.config.hiddenClass);\n        csvRowEl.classList.add(this.config.hiddenClass);\n        updateVisibleRowsCount();\n      });\n    } else {\n      this.config.toggleVisibilityState.textContent = this.config.hideText;\n      this.config.showingHiddenItems = true;\n      excludedItems.forEach( item => {\n        const csvRow = item.getAttribute(this.config.csvControls);\n        const csvRowEl = document.querySelector(csvRow);\n        item.classList.remove(this.config.hiddenClass);\n        csvRowEl.classList.remove(this.config.hiddenClass);\n        updateVisibleRowsCount();\n      });\n    }\n  };\n\n  /**\n  * exclude item handler\n  */\n  excludeItem = event => {\n    event.preventDefault();\n    const targetLink = event.target.closest(\"a\");\n    const targetText = targetLink.querySelector(\"span\");\n    const closestItem = targetLink.closest(\".item\");\n    const closestItemFormEls = closestItem.querySelectorAll(\"button, input, .input-group-text\");\n    const image = closestItem.querySelector(\"img\");\n    const csvSelectorID = closestItem.getAttribute(this.config.csvControls);\n    const matchingCSV = document.querySelector(csvSelectorID);\n    const csvInclusionIndicator = matchingCSV.querySelector(\"svg\");\n\n    // Toggle wording, styles, and visibility\n    if (targetText.textContent === this.config.includeText) {\n        targetText.textContent = this.config.excludeText;\n        closestItem.classList.remove(\"excluded-item\");\n        image.classList.remove(...this.config.visualExcludeClasses);\n        this.config.exclusionCount--;\n        csvInclusionIndicator.classList.add(...this.config.excludeClasses);\n        csvInclusionIndicator.classList.remove(...this.config.includeClasses);\n        closestItemFormEls.forEach( el => {\n          el.removeAttribute('disabled');\n          el.classList.remove(this.config.opacityClass)\n        });\n    } else {\n        targetText.textContent = this.config.includeText;\n        closestItem.classList.add(\"excluded-item\");\n        image.classList.add(...this.config.visualExcludeClasses);\n        this.config.exclusionCount++;\n        csvInclusionIndicator.classList.add(...this.config.includeClasses);\n        csvInclusionIndicator.classList.remove(...this.config.excludeClasses);\n        closestItemFormEls.forEach( el => {\n          el.setAttribute('disabled', true);\n          el.classList.add(this.config.opacityClass)\n        });\n        if (!this.config.showingHiddenItems) {\n            closestItem.classList.add(this.config.hiddenClass);\n            matchingCSV.classList.add(this.config.hiddenClass);\n            updateVisibleRowsCount();\n        }\n    }\n    this.config.toggleVisibilityCount.textContent = this.config.exclusionCount;\n  };\n\n\n  /**\n   * Listeners\n   */\n  addEventListeners = () => {\n    /**\n     * click event handlers\n     */\n    document.addEventListener('click', (event) => {\n      const target = event.target;\n      if (target.closest(\".exclude\")) {\n        this.excludeItem(event);\n      }\n      if (target.closest(\"#toggle-exclude-visibility\")) {\n        this.toggleVisibility();\n      }\n    });\n  }\n}\n","import { makeHash, resetState, resetDataRow } from './utils.js'\nimport { removeButton } from './templates.js'\nimport { updateVisibleRowsCount } from './utils.js';\n\nexport class cloneHandlers {\n  constructor() {\n    this.config = {\n      \"includeClasses\": [\"text-danger\", \"fa-square-xmark\"],\n      \"excludeClasses\": [\"text-success\", \"fa-square-check\"],\n      \"cloneClasses\": [\"text-info\", \"fa-square-c\"],\n    }\n  }\n  /**\n   * cloning an item.\n   * 1. modifiers/prerequisits\n   *    - only allow clones on originals.\n   *    - only allow clones to items that are not excluded\n   * \n   * 2. copy an item with handlers \n   * 3. Modify the clone\n   *    - Modify ID of cloned item to incldue random hash\n   *    - reset various child settings to initial state\n   *    - Modify pointers to matching CSV line with random hash.\n   *    - Remove the ability to preview the full sized from the clone\n   *    - Add a \"Remove\" Button to the cloned item in place of the preview link\n   *    - Add styles to cloned item to demarcate it from surrounding context.\n   * 3. Insert the clone adjacent to origianl item. \n   *    \n   * \n   * 4. Copy and Insert the associated csv row into the sidebar list\n   * 5. Modify the Clones CSV Row\n   *    - Reset its values to initial state.\n   *    - update its identifier to match cloned item.\n   *    \n   * 6. Update counters for total visible. Ensure total hidden also works.\n   *\n   * 7. events:\n   *    - on remove clone\n   *       a. update counts/stats.\n   *       b. remove matching csv row.\n   * \n   */\n\n\n    /**\n    * modfy features of a cloned item and return it.\n    */\n    modifyCloneItem = (clone, randomID) => {\n\n        // update the id.        \n        let cloneId = clone.getAttribute(\"id\"),\n            rowId = clone.getAttribute(\"data-csv-controls\");\n        cloneId = `${cloneId}-${randomID}`;\n        rowId = `${rowId}-${randomID}`;\n        clone.setAttribute(\"id\",cloneId);\n        clone.setAttribute(\"data-csv-controls\", rowId);\n        // reset the state of displayed clone to 'new'\n        resetState(clone, rowId);\n\n        // hide the external preview link\n        const topLinks = clone.querySelector(\".item-top-buttons\");\n        const previewLink = topLinks.querySelector(\"a.external-preview\")\n        topLinks.insertAdjacentHTML(\"beforeend\", removeButton);\n        previewLink.classList.add(\"d-none\");\n\n        // update visual id.\n        const visualId = clone.querySelector(\".item-visual-fs-id\");\n        const oldContent = visualId.textContent;\n        visualId.textContent= `${oldContent} (copy)`;\n\n        const tooltip = bootstrap.Tooltip.getOrCreateInstance(visualId)\n        tooltip.setContent({ '.tooltip-inner':  `Fileset # ${oldContent}, variant ${randomID}` })\n\n        const duplicateButton = clone.querySelector(\"button.clone\");\n        duplicateButton.classList.add(\"d-none\");        \n\n        return clone;\n    };\n\n    /**\n     * clone a data row\n     */\n    cloneDataRow = (rowSelector, randomID,) => {\n        const row = document.querySelector(rowSelector);\n        const rowClone = row.cloneNode(true);\n        const rowIDValule = rowSelector.replace(\"#\", \"\");\n        const cloneId = `${rowIDValule}-${randomID}`;\n        rowClone.setAttribute(\"id\", cloneId);\n\n        const clone_id = rowClone.querySelector(\".entry_clone_id\");\n        clone_id.textContent = `${randomID}`;\n\n        // Iterate through the span elements within the cloned element\n        const dataPoints = rowClone.querySelectorAll('span[data-initial-value]');\n        \n        resetDataRow(dataPoints);\n\n        // insert row\n        row.parentNode.insertBefore(rowClone, row.nextSibling); // Insert the cloned element after the original\n\n        // modify icon to indicate it is a clone\n        const csvInclusionIndicator = rowClone.querySelector(\"svg\");\n        csvInclusionIndicator.classList.add(...this.config.cloneClasses);\n        csvInclusionIndicator.classList.remove(...this.config.excludeClasses);\n\n        // update the count of visible rows\n        updateVisibleRowsCount();\n\n    };\n\n    cloneItem = target => {\n        const container = target.closest('.item');\n        const rowSelector = container.getAttribute(\"data-csv-controls\");\n        const randomID = makeHash();\n        let clone = container.cloneNode(true);\n        this.cloneDataRow(rowSelector, randomID);\n        clone = this.modifyCloneItem(clone, randomID);\n        \n        container.after(clone);\n    };\n    removeClone = target => {\n        const button = target.closest('button');\n        const tooltip = bootstrap.Tooltip.getOrCreateInstance(button);\n        tooltip.hide();\n        const container = target.closest('.item');\n        container.remove();\n        updateVisibleRowsCount();\n    };\n    removeRow = target => {\n        const container = target.closest('.item');\n        const rowSelector = container.getAttribute(\"data-csv-controls\");\n        const matchingRow = document.querySelector(rowSelector);\n        matchingRow.remove();\n        updateVisibleRowsCount();\n    };\n\n\n    /**\n    * Listeners\n    */\n    addEventListeners = () => {\n        document.addEventListener('click', (event) => {\n            // apply actions to specific targets\n            const target = event.target;\n            \n            /**\n             * cloning action. Make a copy of the current 'item'\n             */\n            if (target.closest(\"button.clone\")) {\n              this.cloneItem(target);\n            }\n            /**\n             * cloning action. Make a copy of the current 'item'\n             */\n            if (target.closest(\"button.remove-clone\")) {\n              this.removeClone(target);\n              this.removeRow(target);\n            }\n        });\n    };\n\n}\n\n","/**\n * a basic button to remove items.\n */\nexport const removeButton = `<button type=\"button\" \n                                    class=\"remove-clone btn btn-danger btn-sm\"\n                                    data-bs-toggle=\"tooltip\"\n                                    data-bs-title=\"remove this copied item\">\n                              <span class=\"fas fa-xmark\"></span>\n                            </button>`;\n","export class exporter {\n  constructor() {\n    this.config = {\n      \"exportData\": \"button.export-data\",\n      \"exportPaths\": \"button.export-paths\",\n      \"dataElement\": document.querySelector(\"#data-export\"),\n      \"csvData\": \"\",\n      \"imgPaths\": \"\",\n    }\n  }\n\n  /**\n   * generate a csv header\n   * @return {[type]} [description]\n   */\n  createHeader = (headerItem) => {\n    const headerColumns = Array.from(headerItem.querySelectorAll(\"th.exportable\"));\n    const headerColumnsArray = headerColumns.map((column) => `\"${column.textContent.trim()}\"`);\n    const headerRow = headerColumnsArray.join(',');\n    this.config.csvData = `${headerRow}\\n`;\n  };\n\n  /**\n   * populate the csv rows\n   */\n  gatherData = (data) => {\n\n    // Iterate through data rows\n    for (let i = 1; i < data.length; i++) {\n      const row = data[i];\n      const columns = row.querySelectorAll('td[data-exportable=\"1\"]');\n      const rowData = [];\n      // Iterate through columns in each row\n      columns.forEach((column) => {\n        rowData.push(`\"${column.textContent}\"`);\n      });\n      // Join columns with a comma and add to CSV data\n      this.config.csvData += rowData.join(',') + '\\n';\n    }\n  };\n\n\n  /**\n   * generate a blob and init the click on a temp a link before\n   * destroying it.\n   */\n  downloadCSV = () => {\n    const blob = new Blob([this.config.csvData], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'exported-data.csv';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }\n\n  /**\n   * gather latest data and execute the build/download of the csv file.\n   */\n  exportCSV = () => {\n    // get only visible list items\n    const rows = this.config.dataElement.querySelectorAll(\"tr:not(.d-none)\");\n    const headerItem = rows[0];\n    this.createHeader(headerItem);\n    if (rows.length > 0) {\n      //const [header, ...data] = rows\n      this.gatherData(rows);\n      this.downloadCSV();\n    } else {\n      alert(\"no data to download\");\n    }\n  };\n\n  /**\n   * build image paths for each row.\n   */\n  buildPaths = () => {\n    const data = this.config.dataElement.querySelectorAll(\"tr:not(.d-none)\");\n    let pagePath,\n        entryIiifRegion,\n        entryIiifSize,\n        entryIiifRotation,\n        entryIiifMirror,\n        entryIiifQuality;\n    for (let i = 1; i < data.length; i++) {\n      const row = data[i];\n      pagePath = row.querySelector('td.entry_id').textContent;\n      entryIiifRegion = row.querySelector('td.entry_iiif_region').textContent;\n      entryIiifSize = row.querySelector('td.entry_iiif_size').textContent;\n      entryIiifRotation = row.querySelector('td.entry_iiif_rotation').textContent;\n      entryIiifMirror = row.querySelector('td.entry_iiif_mirror').textContent;\n      entryIiifQuality = row.querySelector('td.entry_iiif_quality').textContent;\n      this.config.imgPaths += `/iiif/ark:/67531/${pagePath}/${entryIiifRegion}/${entryIiifSize}/${entryIiifMirror}${entryIiifRotation}/${entryIiifQuality}\\n`;\n    }\n  };\n\n  /**\n   * generate a blob and init the click on a temp a link before\n   * destroying it.\n   */\n  downloadPaths = () => {\n    const blob = new Blob([this.config.imgPaths], { type: 'text/plain' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'exported-paths.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }\n\n\n  addEventListeners = () => {\n    /**\n     * watch for click events on the document.\n     */\n    document.addEventListener('click', (event) => {\n      // apply actions to specific targets\n      const target = event.target;\n      /**\n       * data export as csv\n       */\n      if (target.closest(this.config.exportData)) {\n        this.exportCSV();\n      }   \n      if (target.closest(this.config.exportPaths)) {\n        this.buildPaths();\n        this.downloadPaths();\n      }  \n    });\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}